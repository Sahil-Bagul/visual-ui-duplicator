import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import Header from '@/components/layout/Header';
import Footer from '@/components/layout/Footer';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';
import PaymentOption from '@/components/payment/PaymentOption';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/context/AuthContext';
import { useToast } from '@/hooks/use-toast';

// Declare Razorpay as a global object
declare global {
  interface Window {
    Razorpay: any;
  }
}

interface PaymentProps {}

const Payment: React.FC<PaymentProps> = () => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedPayment, setSelectedPayment] = useState<'upi' | 'card' | 'netbanking'>('upi');
  const [isRazorpayLoaded, setIsRazorpayLoaded] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const { user } = useAuth();
  const { toast } = useToast();
  
  const courseId = location.state?.courseId;
  const courseTitle = location.state?.courseTitle;
  const coursePrice = location.state?.coursePrice || 0;
  const referralCode = location.state?.referralCode || null;
  
  // Load Razorpay script
  useEffect(() => {
    const loadRazorpay = () => {
      if (window.Razorpay) {
        setIsRazorpayLoaded(true);
        return;
      }
      
      const script = document.createElement('script');
      script.src = 'https://checkout.razorpay.com/v1/checkout.js';
      script.async = true;
      script.onload = () => setIsRazorpayLoaded(true);
      document.body.appendChild(script);
    };
    
    loadRazorpay();
  }, []);
  
  useEffect(() => {
    // Redirect if no course is selected
    if (!courseId) {
      navigate('/dashboard');
    }
  }, [courseId, navigate]);

  const generateOrderId = () => {
    // In a real scenario, this would be generated by your backend
    return 'order_' + Math.random().toString(36).substring(2, 15);
  };

  const handlePayment = async () => {
    if (!user || !courseId) return;
    if (!isRazorpayLoaded) {
      toast({
        title: 'Payment System Loading',
        description: 'Please wait while we initialize the payment system.',
      });
      return;
    }
    
    setIsProcessing(true);
    try {
      // In a real scenario, you'd create an order on your backend and get the order ID
      const orderId = generateOrderId();
      
      // Create the order in the database first
      // Record the purchase with pending status
      const purchaseData = {
        user_id: user.id,
        course_id: courseId,
        has_used_referral_code: !!referralCode,
        used_referral_code: referralCode,
        purchased_at: new Date().toISOString(),
      };
      
      // Store the purchase record in the database
      const { data, error: purchaseError } = await supabase
        .from("purchases")
        .insert(purchaseData)
        .select();
      
      if (purchaseError) {
        throw purchaseError;
      }
      
      // Configure Razorpay options
      const options = {
        key: 'rzp_test_uMvpbB0vwPADDJ', // Using the provided test key
        amount: coursePrice * 100, // Amount in paise
        currency: 'INR',
        name: 'Learn & Earn',
        description: `Purchase of ${courseTitle}`,
        image: 'https://your-logo-url.png',
        order_id: orderId,
        prefill: {
          name: user.user_metadata?.name || 'User',
          email: user.email || '',
          contact: user.user_metadata?.phone || ''
        },
        notes: {
          user_id: user.id,
          course_id: courseId,
          used_referral_code: referralCode,
          purchase_id: data?.[0]?.id // Use the ID from the returned data instead of purchaseData.id
        },
        theme: {
          color: '#00C853'
        },
        handler: function(response: any) {
          // This function will be called after successful payment
          console.log('Payment successful:', response);
          
          // Normally, we'd verify this on the server side via webhook
          // But for demo purposes, we'll update our database here
          handlePaymentSuccess(response);
        }
      };
      
      // Open Razorpay checkout
      const rzp = new window.Razorpay(options);
      rzp.open();
      
      // Reset processing state when modal is closed
      rzp.on('payment.failed', function(response: any) {
        console.log('Payment failed:', response.error);
        toast({
          title: 'Payment Failed',
          description: response.error.description,
          variant: 'destructive',
        });
        setIsProcessing(false);
      });
      
      rzp.on('payment.cancel', function() {
        console.log('Payment cancelled by user');
        toast({
          title: 'Payment Cancelled',
          description: 'You cancelled the payment process.',
        });
        setIsProcessing(false);
      });
    } catch (error) {
      console.error('Payment error:', error);
      toast({
        title: 'Payment Failed',
        description: 'There was a problem with your payment. Please try again.',
        variant: 'destructive',
      });
      setIsProcessing(false);
    }
  };
  
  const handlePaymentSuccess = async (response: any) => {
    try {
      // In a real scenario, this would be handled by the webhook
      // Here we're simulating the webhook's behavior
      
      // Since we can't add payment_status directly to purchases table,
      // we'll rely on the webhook to process this information
      // For now, we simply consider the purchase successful
      
      // Show success toast
      toast({
        title: 'Payment Successful!',
        description: `You've successfully purchased ${courseTitle}.`,
      });
      
      // Redirect to success page
      navigate('/payment-success', { 
        state: { 
          courseId,
          courseTitle,
          coursePrice 
        } 
      });
    } catch (error) {
      console.error('Error updating payment status:', error);
      toast({
        title: 'System Error',
        description: 'Your payment was successful, but we had trouble updating our records. Please contact support.',
        variant: 'destructive',
      });
    } finally {
      setIsProcessing(false);
    }
  };
  
  // For test/development environments when Razorpay is not fully integrated
  const handleSimulatedPayment = async () => {
    if (!user || !courseId) return;
    
    setIsProcessing(true);
    try {
      // For development, simulate a successful payment process
      // Record the purchase in the database
      const purchaseData = {
        user_id: user.id,
        course_id: courseId,
        has_used_referral_code: !!referralCode,
        used_referral_code: referralCode,
        purchased_at: new Date().toISOString(),
      };
      
      // Use .insert() without custom fields that don't exist in the schema
      const { error } = await supabase
        .from("purchases")
        .insert(purchaseData);
      
      if (error) throw error;
      
      // Show success toast
      toast({
        title: 'Simulated Payment Successful!',
        description: `You've successfully purchased ${courseTitle} (test mode).`,
      });
      
      // Redirect to success page
      navigate('/payment-success', { 
        state: { 
          courseId,
          courseTitle,
          coursePrice 
        } 
      });
    } catch (error) {
      console.error('Payment error:', error);
      toast({
        title: 'Payment Failed',
        description: 'There was a problem with your payment. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      <Header />
      <main className="max-w-[993px] mx-auto my-0 px-6 py-8 max-sm:p-4 w-full flex-grow">
        <div className="bg-white rounded-lg shadow-sm border border-gray-100 p-8">
          <h1 className="text-2xl font-bold text-gray-900 mb-6">Checkout</h1>
          
          <div className="flex flex-col md:flex-row gap-8">
            <div className="flex-1 order-2 md:order-1">
              <div className="mb-6">
                <h2 className="text-lg font-semibold mb-3">Payment Method</h2>
                <div className="space-y-3">
                  <PaymentOption 
                    id="upi"
                    title="UPI / QR"
                    subtitle="Pay via UPI Apps like GPay, PhonePe, Paytm"
                    selected={selectedPayment === 'upi'}
                    onChange={() => setSelectedPayment('upi')}
                  />
                  
                  <PaymentOption 
                    id="card"
                    title="Credit / Debit Card"
                    subtitle="All major cards accepted"
                    selected={selectedPayment === 'card'}
                    onChange={() => setSelectedPayment('card')}
                  />
                  
                  <PaymentOption 
                    id="netbanking"
                    title="Net Banking"
                    subtitle="All Indian banks supported"
                    selected={selectedPayment === 'netbanking'}
                    onChange={() => setSelectedPayment('netbanking')}
                  />
                </div>
              </div>
              
              {isRazorpayLoaded ? (
                <Button
                  onClick={handlePayment}
                  disabled={isProcessing}
                  className="w-full bg-[#00C853] hover:bg-[#00B248] text-white mt-4 py-6 text-lg"
                >
                  {isProcessing ? (
                    <>
                      <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                      Processing...
                    </>
                  ) : (
                    `Pay â¹${coursePrice}`
                  )}
                </Button>
              ) : (
                <Button
                  onClick={handleSimulatedPayment}
                  disabled={isProcessing}
                  className="w-full bg-[#00C853] hover:bg-[#00B248] text-white mt-4 py-6 text-lg"
                >
                  {isProcessing ? (
                    <>
                      <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                      Processing...
                    </>
                  ) : (
                    `Pay â¹${coursePrice} (Test Mode)`
                  )}
                </Button>
              )}
              
              <p className="text-xs text-gray-500 mt-2 text-center">Safe & Secure Payment</p>
              
              {!isRazorpayLoaded && (
                <div className="mt-4 bg-yellow-50 p-3 rounded-md text-sm">
                  <p className="text-yellow-800">
                    <strong>Note:</strong> Using Test Mode as Razorpay integration is still in progress. This simulates the full payment flow.
                  </p>
                </div>
              )}
            </div>
            
            <div className="flex-1 order-1 md:order-2">
              <div className="bg-gray-50 p-6 rounded-lg border border-gray-100">
                <h2 className="text-lg font-semibold mb-4">Order Summary</h2>
                
                <div className="flex justify-between items-center mb-3">
                  <span className="text-gray-600">{courseTitle}</span>
                  <span className="font-medium">â¹{coursePrice}</span>
                </div>
                
                <div className="flex justify-between items-center mb-3 text-sm">
                  <span className="text-gray-500">GST (Included)</span>
                  <span className="text-gray-500">â¹{Math.round(coursePrice * 0.18)}</span>
                </div>
                
                {referralCode && (
                  <div className="bg-blue-50 p-2 rounded text-sm mb-3">
                    <p className="text-blue-700">Referral code applied: {referralCode}</p>
                  </div>
                )}
                
                <div className="border-t border-gray-200 my-3 pt-3">
                  <div className="flex justify-between items-center">
                    <span className="font-semibold">Total</span>
                    <span className="text-xl font-bold">â¹{coursePrice}</span>
                  </div>
                </div>
                
                <div className="mt-4 bg-yellow-50 p-3 rounded-lg">
                  <p className="text-sm text-yellow-800">
                    After successful payment, you'll get immediate access to the course PDF and your own referral code.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default Payment;
